# Zsh Performance Optimizations
# Lazy loading for faster shell startup

# Lazy load NVM
nvm_lazy() {
    unset -f nvm node npm npx
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion"
}

# Define placeholder functions
nvm() {
    nvm_lazy
    nvm "$@"
}

node() {
    nvm_lazy
    node "$@"
}

npm() {
    nvm_lazy
    npm "$@"
}

npx() {
    nvm_lazy
    npx "$@"
}

# Lazy load Python UV
uv_lazy() {
    unset -f uv python pip
    if command -v uv &>/dev/null; then
        # UV already available globally
        return
    fi
    # Load UV if not available
    export PATH="$HOME/.local/bin:$PATH"
}

uv() {
    uv_lazy
    command uv "$@"
}

# Lazy load Rust/Cargo
cargo_lazy() {
    unset -f cargo rustc rustup
    if [[ -f "$HOME/.cargo/env" ]]; then
        source "$HOME/.cargo/env"
    fi
}

cargo() {
    cargo_lazy
    cargo "$@"
}

rustc() {
    cargo_lazy
    rustc "$@"
}

rustup() {
    cargo_lazy
    rustup "$@"
}

# Lazy load Ruby (if rbenv is used)
if command -v rbenv &>/dev/null; then
    rbenv_lazy() {
        unset -f ruby gem
        eval "$(rbenv init -)"
    }
    
    ruby() {
        rbenv_lazy
        ruby "$@"
    }
    
    gem() {
        rbenv_lazy
        gem "$@"
    }
fi

# Lazy load Pyenv (skip if pip issues exist)
# Disabled due to pip alias conflicts
# if command -v pyenv &>/dev/null; then
#     eval "$(pyenv init -)"
# fi

# Fast directory navigation with zoxide (if installed)
if command -v zoxide &>/dev/null; then
    eval "$(zoxide init zsh)"
fi

# Fast fuzzy finding with fzf (if installed)
if command -v fzf &>/dev/null; then
    # Use fd for fzf if available (faster than find)
    if command -v fd &>/dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
        export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
    fi
    
    # Better fzf options
    export FZF_DEFAULT_OPTS='
        --height 40% 
        --layout=reverse 
        --border
        --multi
        --preview-window=right:60%
        --bind ctrl-u:preview-up,ctrl-d:preview-down
    '
    
    # Use bat for preview if available
    if command -v bat &>/dev/null; then
        export FZF_CTRL_T_OPTS="--preview 'bat --color=always --style=header,grid --line-range :300 {}'"
    fi
    
    # Load fzf key bindings
    if [[ -f ~/.fzf.zsh ]]; then
        source ~/.fzf.zsh
    fi
fi

# Optimize history settings for performance
export HISTSIZE=50000
export SAVEHIST=50000
export HISTFILE="$XDG_STATE_HOME/zsh/history"

# Enable sharing history between sessions but reduce disk writes
setopt SHARE_HISTORY
setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_FIND_NO_DUPS

# Reduce completion system overhead
autoload -Uz compinit

# Check if .zcompdump is older than 24 hours
if [[ -n ${ZDOTDIR:-$HOME}/.zcompdump(#qN.mh+24) ]]; then
    compinit
else
    compinit -C
fi

# Speed up git in large repositories
export GIT_OPTIONAL_LOCKS=0

# Async loading for heavy operations (if async plugin is available)
if (( $+functions[async_init] )); then
    async_init
    
    # Load heavy completions asynchronously
    async_job completion_loader 'autoload -Uz _docker _kubectl _npm'
fi